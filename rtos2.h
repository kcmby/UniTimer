#ifndef RTOS2_H
#define RTOS2_H

	/******************************************************************************************
	 * За основу взят планировщик задач с сайта ChipEnable.ru                                 *
	 * http://chipenable.ru/index.php/programming-avr/item/110-planirovschik.html             *
	 *                                                                                        *
	 * Доработал Шибанов Владимир aka KontAr                                                  *
	 * Дата: 26.03.2014                                                                       *
	 *                                                                                        *
	 * Изменения:                                                                             *
	 * - добавлен однократный вызов задачи                                                    *
	 * - добавлено удаление задачи по имени                                                   *
	 * - при повторном добавлении задачи обновляются ее переменные                            *
	 * - добавлен указатель на "хвост" списка                                                 *
	 * - функции РТОС скорректированы с учетом "хвоста"                                       *
	 *                                                                                        *
	 * Доработал КСМ						                                                  *
	 * Дата: 12.09.2019                                                                       *
	 *                                                                                        *
	 * Изменения:                                                                             *
	 * - добавлена возможность запуска коротких задач прямо из прерывания таймера РТОС		  *
	 * - добавлена функция чтения текущей задержки срабатывания задачи						  *
	 ******************************************************************************************/
	#include "commons.h"
	#include "rtoshal.h"

	//#define INTFUNC					        // Версия с вызовом коротких функций из прерывания

	#define NO_DELAY		0				// Для задач запускаемых без задержек
	#define NO_PERIOD		0				// Для задач запускаемых разово
	//#define NO_CRITICAL		0			// Для задач запускаемых из диспетчера (обычные задачи)
	//#define CRITICAL		_BV(7)			// Для задач запускаемых из таймера (задачи требующие мгновенной реакции))


	/******************************************************************************************
	 * Структура задачи
	 */
	#ifdef INTFUNC
		typedef struct task
		{
		   void (*pFunc) (void);               // указатель на функцию
		   u32 delay;                          // задержка перед первым запуском задачи
		   u32 period;                         // период запуска задачи
		   u08 run;                            // флаг готовности задачи к запуску (и признак "критичности")
		   void (*pIFunc) (void);              // указатель на функцию, запускаемой из прерывания
		}task;
	#else
		typedef struct task
		{
		   void (*pFunc) (void);               // указатель на функцию
		   u32 delay;                          // задержка перед первым запуском задачи
		   u32 period;                         // период запуска задачи
		   u08 run;                            // флаг готовности задачи к запуску (и признак "критичности")
		}task;
	#endif
	/******************************************************************************************
	 * Прототипы фукнций
	 */
	void RTOS_DeleteTask (void (*taskFunc)(void));
	void RTOS_DispatchTask (void);
	#ifdef INTFUNC
		void RTOS_SetTask (void (*taskFunc)(void), u32 taskDelay, u32 taskPeriod, void (*IFunc)(void));
	#else
		void RTOS_SetTask (void (*taskFunc)(void), u32 taskDelay, u32 taskPeriod);
	#endif
	//u32 RTOS_ReadDelay (void (*function)(void));
#endif
